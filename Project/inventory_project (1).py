# -*- coding: utf-8 -*-
"""inventory_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15S2DtJRj85J0wQpFcroljUvy28pEfU-D
"""

import numpy as np
np.random.seed(10)

m = int(input("Enter M: "))  #for max inventory
n = int(input("Enter N: "))  # review and order day
w = int(input("Enter w: "))  #for max warehouse

beginning_inventory = 6
beginning_warehouse = 12

demand = 0
demand_warehouse = 0

ending_inventory = 0
ending_warehouse = 0

shortage_quantity = 0
shortage_quantity_warehouse = 0
shortage_quantity_fill_from_warehouse = 0


order_quantity = 8
order_quantity_warehouse = 8


days_until_next_arrival = 3


shortage_count = 0 # to count the shortage days
shortage_count_warehouse = 0 # to count the shortage days

total_ending_inventory = [] # to store all ending inventory values
total_ending_warehouse = [] # to store all ending inventory values

days = [] # to store the days
days_warehouse = [] # to store the days

total_days = 0 
total_days_warehouse = 0 

for cycle in range(10):
    print("Cycle No: ", cycle)
    print("----------------------------------------------------------")
    print("----------------------------------------------------------")
    for day in range(1, n+1):
        print("Day: ", day)

        # calculate beginning inventory, consider arrival of orders placed

        total_days += 1
        total_days_warehouse +=1

        days.append(total_days)
        days.append(total_days_warehouse)

        if days_until_next_arrival == 0 : 
          beginning_inventory = ending_inventory + order_quantity 
          beginning_warehouse = ending_warehouse + order_quantity_warehouse
          order_quantity = 0
          order_quantity_warehouse = 0
          

        if beginning_inventory > m or beginning_warehouse > w :
          beginning_inventory = m 
          beginning_warehouse = w
          

        daily_demand = np.random.choice([0,1,2,3,4,5], p=[0.10,0.15,0.25,0.25,0.15,0.10])
        # update total_demand using daily demand

        total_demand = daily_demand + shortage_quantity

        if total_demand <= beginning_inventory:
            # No shortage
            # Update -> shortage_quantity, ending_inventory
            ending_inventory = beginning_inventory - total_demand
            shortage_quantity = 0
            ending_warehouse = beginning_warehouse        
        elif ending_warehouse<1 :
            #  ending_inventory=beginning_warehouse-shortage_count
             # shortage_quantity_warehouse = 0
            extra_demand_warehouse = total_demand - beginning_warehouse
            shortage_quantity_warehouse = extra_demand_warehouse
            ending_warehouse = 0
            shortage_count_warehouse +=shortage_quantity_warehouse
        else:      
            # shortage occurs
            # Update -> shortage_quantity, ending_inventory
            extra_demand = total_demand - beginning_inventory
            shortage_quantity = extra_demand
            ending_inventory = 0
            shortage_count += shortage_quantity
            #ending_warehouse=beginning_warehouse+(beginning_inventory-daily_demand)
            ending_warehouse=beginning_warehouse-shortage_count
           # shortage_quantity_fill_from_warehouse=shortage_count
            shortage_count=0
            shortage_quantity=0

        total_ending_inventory.append(ending_inventory)
        total_ending_warehouse.append(ending_warehouse)

      
        
        print("Beginning Inventory: ", beginning_inventory)
        print("Beginning warehouse: ", beginning_warehouse)

        print("Daily Demand: ", daily_demand)

        print("Ending Inventory: ", ending_inventory)
        print("Ending warehouse: ", ending_warehouse)

        print("Shortage Quantity: ", shortage_count)  
        print("Warehouse Shortage Quantity: ", shortage_count_warehouse)
        #print("Inventroy Shortage Quantity fill : ",shortage_quantity_fill_from_warehouse)

   # Code for review day
        if (day==n):
           # calculate order_quantity using M, ending_inventory, shortage_quantity
           # sample days_until_arrival value (similar to daily_demand sampling)
            
           # consider days_until_arrival (lead time) > 2

          order_quantity = ( m-ending_inventory )
       
          order_quantity_warehouse = ( w-ending_warehouse )
          
          lead_time = np.random.choice([5,0,3,2], p=[0.50, 0.35, 0.10,0.05])
        
          days_until_next_arrival = lead_time
          print("lead time form here",days_until_next_arrival)
          order_quantity += shortage_quantity
      
        
        beginning_inventory = ending_inventory
        #beginning_warehouse = beginning_warehouse-shortage_count
        beginning_warehouse = ending_warehouse
        if day == n:  
          
          pass

        else :
          
          days_until_next_arrival -= 1

        print("Order Quantity: ",order_quantity)
        print("Order Quantity_warehouse: ",order_quantity_warehouse)
        print("Days Until Next Arrival: ",days_until_next_arrival)

        print("##########################################################")
        print("##########################################################")
        print("##########################################################")
        print("##########################################################")

        
         
# Avg ending inventory
print("Average Ending Inventory: ", sum(total_ending_inventory)/ (n*10))
print("Average Ending warehouse: ", sum(total_ending_warehouse)/ (n*10))
# Shortage day
print("Number Shortage occured (Day): ", shortage_count)
# Ending inventory plot

# Print final reports
# Average ending inventory
# number of shortage days

# Graph (ending inventory vs days)

import matplotlib.pyplot as plt
plt.title("Inventory_level vs Day graph")
#plt.plot(days,total_ending_inventory,marker = "o")
#plt.plot(days,total_ending_warehouse,marker = "o")
plt.xlabel("day number")
plt.ylabel("Ending_inventory of each day")
plt.show()